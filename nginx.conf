
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    upstream backend {
        server 127.0.0.1:8010 weight=2;  
        server 127.0.0.1:8011 weight=4; 
        server 127.0.0.1:8012 weight=6; 
    }

    #lua_package_path "c:/Users/Jan/Downloads/openresty-1.21.4.2-win64/conf/?.lua;;";

    server {
        listen       8585;
        server_name  nginx;

    location = /favicon.ico {
            access_log off;
            log_not_found off;
        }

        location / {
            proxy_pass http://backend/;  
            root   html;
            index  index.html index.htm;
        }

        location /nginx_status {
            stub_status on;
        }

        location /metrics {
            proxy_pass http://127.0.0.1:8585/metrics;  
        }

        location /combined_metrics {
            content_by_lua_block {
                local server_addresses = {
                    "http://127.0.0.1:8010/metrics",
                    "http://127.0.0.1:8011/metrics",
                    "http://127.0.0.1:8012/metrics"
                }

                local combined_metrics = ""

                for _, address in ipairs(server_addresses) do
                    local res = ngx.location.capture('/internal_proxy', { method = ngx.HTTP_GET, args = { target = address } })
                    if res.status == 200 then
                        combined_metrics = combined_metrics .. res.body .. "\n"
                    else
                        ngx.log(ngx.ERR, "Failed to fetch metrics from " .. address .. ": " .. (res.status .. " " .. res.body))
                    end
                end

                ngx.say(combined_metrics)
            }
        }

        location /internal_proxy {
            internal;
            rewrite_by_lua_block {
                ngx.req.set_uri_args({target = ngx.var.arg_target})
            }
            proxy_pass http://backend;
        }

        location /zipkin/ {
            proxy_pass http://192.168.1.3:9411/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        #location /metrics {
        #    rewrite_by_lua_block {
        #        dofile("c:/Users/Jan/Downloads/openresty-1.21.4.2-win64/conf/aggregate_metrics.lua")
        #    }
        #}


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
